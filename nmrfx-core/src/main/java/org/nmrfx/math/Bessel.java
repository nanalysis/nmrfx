/*
 * NMRFx Processor : A Program for Processing NMR Data
 * Copyright (C) 2004-2017 One Moon Scientific, Inc., Westfield, N.J., USA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /* 
The implementation of the modified Bessel function is based on code
from the Boost Library and maybe subject to this license

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
 */
package org.nmrfx.math;

import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

public class Bessel {

    // Approximation of the Modifed Bessel function of the first kind
    // Based on concepts at:
    // https://www.advanpix.com/2015/11/11/rational-approximations-for-the-modified-bessel-function-of-the-first-kind-i0-computations-double-precision
    // and refined polynomial values from the Boost library
    // https://www.boost.org/doc/libs/1_77_0/boost/math/special_functions/detail/bessel_i0.hpp
    private Bessel() {
    }

    public static final double[] COEF_LOW = {
            1.00000000000000000e+00,
            2.49999999999999909e-01,
            2.77777777777782257e-02,
            1.73611111111023792e-03,
            6.94444444453352521e-05,
            1.92901234513219920e-06,
            3.93675991102510739e-08,
            6.15118672704439289e-10,
            7.59407002058973446e-12,
            7.59389793369836367e-14,
            6.27767773636292611e-16,
            4.34709704153272287e-18,
            2.63417742690109154e-20,
            1.13943037744822825e-22,
            9.07926920085624812e-25
    };

    public static final double[] COEF_MED = {
            3.98942280401425088e-01,
            4.98677850604961985e-02,
            2.80506233928312623e-02,
            2.92211225166047873e-02,
            4.44207299493659561e-02,
            1.30970574605856719e-01,
            -3.35052280231727022e+00,
            2.33025711583514727e+02,
            -1.13366350697172355e+04,
            4.24057674317867331e+05,
            -1.23157028595698731e+07,
            2.80231938155267516e+08,
            -5.01883999713777929e+09,
            7.08029243015109113e+10,
            -7.84261082124811106e+11,
            6.76825737854096565e+12,
            -4.49034849696138065e+13,
            2.24155239966958995e+14,
            -8.13426467865659318e+14,
            2.02391097391687777e+15,
            -3.08675715295370878e+15,
            2.17587543863819074e+15

    };
    public static final double[] COEF_HIGH = {
            3.98942280401432905e-01,
            4.98677850491434560e-02,
            2.80506308916506102e-02,
            2.92179096853915176e-02,
            4.53371208762579442e-02
    };
    public final static PolynomialFunction polyLow = new PolynomialFunction(COEF_LOW);
    public final static PolynomialFunction polyMed = new PolynomialFunction(COEF_MED);
    public final static PolynomialFunction polyHigh = new PolynomialFunction(COEF_HIGH);

    /**
     * @author brucejohnson
     */
    public static double i0(double x) {
        if (x < 7.75) {
            double a = x * x / 4.0;
            return a * polyLow.value(a) + 1.0;
        } else if (x < 500.0) {
            return Math.exp(x) * polyMed.value(1.0 / x) / Math.sqrt(x);
        } else {
            double ex = Math.exp(x / 2.0);
            double result = ex * polyHigh.value(1.0 / x) / Math.sqrt(x);
            result *= ex;
            return result;
        }
    }
}
